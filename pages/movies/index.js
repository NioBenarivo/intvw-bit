import { useEffect, useState, useRef } from 'react'
import axios from 'axios'
import { useRouter } from 'next/router'
import Head from 'next/head'
import Modal from '@components/Modal'
import Movie from '@components/Movie'
import useDebounce from '@hooks/useDebounce'
import useOnScreen from '@hooks/useOnScreen'
import { useMovieList } from '../../redux/action'

const domain = 'http://www.omdbapi.com?apikey=faf7e5bb';

export default function MovieList() {
  const { currentPage, incrementPage, movieList, addMovieList, setMovieList } = useMovieList();
  const router = useRouter()
  const ref = useRef();
  const [searchKeyword, setSearchKeywords] = useState('');
  const [searchDropdown, setSearchDropdown] = useState([]);
  const [modalProps, setModalProps] = useState({
    display: false,
    link: ''
  });
  const debouncedSearch = useDebounce(searchKeyword, 200);
  const onScreen = useOnScreen(ref, "0px");

  useEffect(async () => {
    if (debouncedSearch.length > 1) {
      const list = await getSearchData(debouncedSearch);
      setSearchDropdown(list);
    } else {
      setSearchDropdown([]);
    }
  }, [debouncedSearch])

  useEffect(async () => {
    if (movieList.length > 0 && onScreen) {
      incrementPage();
    }
  }, [onScreen])

  useEffect(async () => {
    const list = await getSearchData(searchKeyword, currentPage)
    addMovieList(list)
  }, [currentPage])

  const getSearchData = async (searchKey, page = 1) => {
    let searchResult = [];
    try {
      const res = await axios.get(`${domain}&s=${searchKey}&page=${page}`)
      const data = res.data || {};
      searchResult = data.Search || [];
    } catch (err) {
      console.log(err)
    }

    return searchResult
  }

  const handleChange = e => {
    setSearchKeywords(e.target.value)
  }

  const handleSubmit = async e => {
    e.preventDefault();
    const list = await getSearchData(searchKeyword);
    setSearchDropdown([]);
    setMovieList(list)
  }

  const handleModal = link => {
    setModalProps({
      display: !modalProps.display,
      link,
    });
  }

  const renderMovies = () => {
    return movieList.length > 0 && movieList.map((movie, index) => <Movie data={movie} key={`${movie}-${index}`} onClick={handleModal} />);
  }

  const renderDropdown = () => {
    return searchDropdown.length > 0 ? 
      <div className="search-dropdown">
        {
          searchDropdown.map((searchItem, index) => {
            const imdbID = searchItem.imdbID || "";
            return (
              <Movie 
                key={index}
                data={searchItem} 
                searchLayout 
                onClick={() => router.push(`/movies/${imdbID}`)} 
              />
            )
          })
        }
      </div> : ''
  }

  return (
    <div className="wrapper">
      <Head>
        <title>Movie App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="container">
        <div className="header">
          <h2>Search Movies</h2>
          <div className="search-container">
            <form onSubmit={handleSubmit} className="search-form">
              <input 
                type="search"
                value={searchKeyword} 
                onChange={e => handleChange(e)} />
              <button type="submit">Search</button>
            </form>
            {renderDropdown()}
          </div>
        </div>
        <div className="movie-list">
          {renderMovies()}
        </div>
      </div>
      <div ref={ref} />
      <Modal {...modalProps} setModalProps={setModalProps} />
    </div>
  )
}
