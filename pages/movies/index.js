import { useEffect, useState, useRef } from 'react'
import { useRouter } from 'next/router'
import Head from 'next/head'
import axios from 'axios'
import Image from 'next/image'
import Loader from '../../components/Loader'
import Modal from '../../components/Modal'
import Movie from '../../components/Movie'
import useDebounce from '../../hooks/useDebounce'
import useOnScreen from '../../hooks/useOnScreen'

const domain = 'http://www.omdbapi.com?apikey=faf7e5bb';

export default function MovieList() {
  const router = useRouter()
  const ref = useRef();
  const [searchKeyword, setSearchKeywords] = useState('');
  const [searchDropdown, setSearchDropdown] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [loading, setLoading] = useState(false);
  const [data, setData] = useState([]);
  const [modalProps, setModalProps] = useState({
    display: false,
    link: ''
  });
  const debouncedSearch = useDebounce(searchKeyword, 300);
  const onScreen = useOnScreen(ref, "0px");

  useEffect(async () => {
    if (debouncedSearch.length > 1) {
      const list = await getSearchData(debouncedSearch);
      setSearchDropdown(list);
    } else {
      setSearchDropdown([]);
    }
  }, [debouncedSearch])

  useEffect(async () => {
    if (data.length > 0 && onScreen) {
      setCurrentPage(currentPage + 1);
      const list = await getSearchData(searchKeyword, currentPage)
      setData([...data, ...list])
    }
  }, [onScreen])

  const getSearchData = async (searchKey, page = 1) => {
    setLoading(true)
    let searchResult = [];
    try {
      const res = await axios.get(`${domain}&s=${searchKey}&page=${page}`)
      const data = res.data || {};
      searchResult = data.Search || [];
    } catch (err) {
      console.log(err)
    } finally {
      setLoading(false)
    }

    return searchResult
  }

  const handleChange = e => {
    setSearchKeywords(e.target.value)
  }

  const handleSubmit = async e => {
    e.preventDefault();
    const list = await getSearchData(searchKeyword);
    setSearchDropdown([]);
    setData(list);
  }

  const handleModal = link => {
    setModalProps({
      display: !modalProps.display,
      link,
    });
  }

  const renderMovies = () => {
    return data.length > 0 && data.map((movie, index) => <Movie data={movie} key={`${movie}-${index}`} openModal={handleModal} />);
  }

  return (
    <div className="wrapper">
      <Head>
        <title>Movie App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="container">
        <div className="header">
          <h2>Search Movies</h2>
          <form onSubmit={handleSubmit} className="search-form">
            <input 
              type="search"
              value={searchKeyword} 
              onChange={e => handleChange(e)} />
            <button type="submit">Search</button>
          </form>
          {
            searchDropdown.length > 0 ? 
              <div className="search-dropdown">
                {
                  searchDropdown.map((searchItem, index) => {
                    const poster = searchItem.Poster || "";
                    const title = searchItem.Title || "";
                    const year = searchItem.Year || "";
                    const imdbID = searchItem.imdbID || "";
                    return (
                      <div className="flex" key={index} onClick={() => router.push(`/movies/${imdbID}`)}>
                        {
                          poster && poster !== 'N/A' ? 
                            <Image 
                              alt={title}
                              src={poster}
                              width={40}
                              height={40}
                              objectFit="contain"
                            /> : 
                            <div className="empty-image">
                              <span>No Image</span>
                            </div>
                        }
                        <div className="flex flex-column">
                          <h4>{title}</h4>
                          <p>{year}</p>
                        </div>
                      </div>
                    )
                  })
                }
              </div> : ''
          }
          
        </div>
        <div className="movie-list">
          {renderMovies()}
        </div>
      </div>
      <div ref={ref} />
      <Modal {...modalProps} setModalProps={setModalProps} />
    </div>
  )
}
